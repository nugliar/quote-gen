{"version":3,"sources":["features/quote/quoteSlice.js","app/store.js","features/quote/SocialButtons.js","features/quote/Quote.js","App.js","index.js"],"names":["fetchQuote","createAsyncThunk","a","fetch","response","json","quoteSlice","createSlice","name","initialState","item","status","error","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","selectQuote","quote","configureStore","reducer","quoteReducer","SocialButtons","useSelector","tweetText","content","author","twitterShare","id","href","className","Quote","dispatch","useDispatch","useEffect","onClick","App","rel","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"8NAEaA,EAAaC,YACxB,mBADwC,sBAExC,4BAAAC,EAAA,sEACyBC,MAAM,kCAD/B,cACQC,EADR,yBAESA,EAASC,QAFlB,4CA+BaC,EAnBIC,YAAY,CAC7BC,KAAM,QACNC,aARmB,CACnBC,KAAM,GACNC,OAAQ,OACRC,MAAO,MAMPC,SAAU,GACVC,eAAa,mBACVd,EAAWe,SAAU,SAACC,EAAOC,GAC5BD,EAAML,OAAS,aAFN,cAIVX,EAAWkB,WAAY,SAACF,EAAOC,GAC9BD,EAAML,OAAS,YACfK,EAAMN,KAAOO,EAAOE,WANX,cAQVnB,EAAWoB,UAAW,SAACJ,EAAOC,GAC7BD,EAAML,OAAS,WACfK,EAAMJ,MAAQK,EAAOE,WAVZ,KAef,QAEaE,EAAc,SAAAL,GAAK,OAAIA,EAAMM,MAAMZ,MCjCjCa,cAAe,CAC5BC,QAAS,CACPF,MAAOG,K,cCDEC,EAAgB,WAC3B,IAAMJ,EAAQK,YAAYN,GAGpBO,EAAS,gBAAYN,EAAMO,QAAlB,aAA8BP,EAAMQ,QAG7CC,EACJ,+BACE,mBACEC,GAAG,cACHC,KAAI,UARO,mCAQP,YAAiBL,EAAjB,YANQ,kBAId,SAKE,mBAAGM,UAAU,sCAKnB,OACE,qBAAKA,UAAU,iBAAf,SACGH,KCpBMI,EAAQ,WACnB,IAYIL,EAAQD,EAZNO,EAAWC,cAEXf,EAAQK,YAAYN,GACpBV,EAASgB,aAAY,SAAAX,GAAK,OAAIA,EAAMM,MAAMX,UAC1CC,EAAQe,aAAY,SAAAX,GAAK,OAAIA,EAAMM,MAAMV,SAqB/C,OAnBA0B,qBAAU,WACO,SAAX3B,GACFyB,EAASpC,OAEV,CAACoC,EAAUzB,IAIC,SAAXA,GAAgC,YAAXA,GACvBmB,EAAS,MACTD,EAAU,OACU,cAAXlB,GACTmB,EAASR,EAAMQ,OACfD,EAAUP,EAAMO,SACI,aAAXlB,IACTmB,EAAS,MACTD,EAAUjB,GAIV,0BAASoB,GAAG,YAAZ,UACE,uCACA,mBAAGA,GAAG,OAAN,SAAcH,IACd,mBAAGG,GAAG,SAAN,SAAe,4BAAIF,MACnB,wBACEE,GAAG,YACHE,UAAU,SACVK,QAAS,kBAAMH,EAASpC,MAH1B,uBAOA,cAAC,EAAD,QC5BSwC,MAdf,WACE,OACE,sBAAKN,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,8CACA,sBAAMD,KAAK,oEAAoEQ,IAAI,kBAErF,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,UCHRQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.21d1dd71.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nexport const fetchQuote = createAsyncThunk(\n  'quote/fetchQuote',\n  async () => {\n    const response = await fetch(\"https://api.quotable.io/random\")\n    return response.json()\n  }\n)\n\nconst initialState = {\n  item: {},\n  status: 'idle',\n  error: null\n}\n\nconst quoteSlice = createSlice({\n  name: 'quote',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchQuote.pending]: (state, action) => {\n      state.status = 'pending'\n    },\n    [fetchQuote.fulfilled]: (state, action) => {\n      state.status = 'succeeded'\n      state.item = action.payload\n    },\n    [fetchQuote.rejected]: (state, action) => {\n      state.status = 'rejected'\n      state.error = action.payload\n    }\n  }\n})\n\nexport default quoteSlice.reducer\n\nexport const selectQuote = state => state.quote.item\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport quoteReducer from '../features/quote/quoteSlice'\n\nexport default configureStore({\n  reducer: {\n    quote: quoteReducer\n  }\n})\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { selectQuote } from './quoteSlice'\n\nexport const SocialButtons = () => {\n  const quote = useSelector(selectQuote)\n\n  const tweetUrl = 'https://twitter.com/intent/tweet'\n  const tweetText = `text=\"${quote.content}\" ${quote.author}`\n  const tweetTags = 'hashtags=quote'\n\n  const twitterShare = (\n    <span>\n      <a\n        id='tweet-quote'\n        href={`${tweetUrl}?${tweetText}&${tweetTags}`}\n        // disabled={canShare}\n      >\n        <i className=\"icon-social icon-twitter-sign\"></i>\n      </a>\n    </span>\n  )\n\n  return (\n    <div className='social-buttons'>\n      {twitterShare}\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { fetchQuote, selectQuote } from './quoteSlice'\nimport { SocialButtons } from './SocialButtons'\n\nexport const Quote = () => {\n  const dispatch = useDispatch()\n\n  const quote = useSelector(selectQuote)\n  const status = useSelector(state => state.quote.status)\n  const error = useSelector(state => state.quote.error)\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchQuote())\n    }\n  }, [dispatch, status])\n\n  let author, content\n\n  if (status === 'idle' || status === 'pending') {\n    author = '...'\n    content = '...'\n  } else if (status === 'succeeded') {\n    author = quote.author\n    content = quote.content\n  } else if (status === 'rejected') {\n    author = '...'\n    content = error\n  }\n\n  return (\n    <section id='quote-box'>\n      <h1>Quote</h1>\n      <p id='text'>{content}</p>\n      <p id='author'><i>{author}</i></p>\n      <button\n        id='new-quote'\n        className='button'\n        onClick={() => dispatch(fetchQuote())}\n      >\n        New quote\n      </button>\n      <SocialButtons />\n    </section>\n  )\n}\n","import { Quote } from './features/quote/Quote'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <title>Quote Box</title>\n        <link href=\"//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css\" rel=\"stylesheet\" />\n      </header>\n      <div className='App'>\n        <Quote />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './app/store'\nimport App from './App';\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}